{
    "openapi": "3.0.2",
    "info": {
        "title": "Hannes Juurma's SmallBank API",
        "version": "1.0.0",
        "description": "This is the SmallBank API Documentation",
        "contact": {
            "email": "hannes.juurma@khk.ee"
        }
    },
    "servers": [
        {
            "url": "http://localhost:9000",
            "description": ""
        }
    ],
    "paths": {
        "/users": {
            "summary": "User related operations",
            "description": "",
            "post": {
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/postUsersRequest"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "users"
                ],
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/postUsersResponse"
                                }
                            }
                        },
                        "description": "User successfully registered"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "Something wrong with the request"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                },
                                "examples": {
                                    "emailExists": {
                                        "value": {
                                            "error": "Email already in use!"
                                        }
                                    }
                                }
                            }
                        },
                        "description": "Email already exists"
                    }
                },
                "summary": "Register a new user to the bank"
            }
        },
        "/sessions": {
            "summary": "Sessions related operations",
            "post": {
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/postSessionsRequest"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "sessions"
                ],
                "parameters": [
                    {
                        "name": "authorization",
                        "description": "Save the user's session in a cookie after successful login",
                        "schema": {
                            "type": "string"
                        },
                        "in": "cookie"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/postSessionsResponse"
                                }
                            }
                        },
                        "description": "Login successful and authorization token saved as a cookie"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "User's parameters are inserted incorrectly"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                },
                                "examples": {
                                    "invalidCredentials": {
                                        "value": {
                                            "error": "This email/password is invalid"
                                        }
                                    }
                                }
                            }
                        },
                        "description": "Email or password invalid"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                },
                                "examples": {
                                    "sessionLogError": {
                                        "value": {
                                            "error": "Could not create a session log."
                                        }
                                    }
                                }
                            }
                        },
                        "description": "Failed to save a session log"
                    }
                },
                "summary": "Create a new user session with existing account"
            }
        },
        "/balance": {
            "summary": "User's balance related operations",
            "get": {
                "tags": [
                    "balance"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/getBalanceResponse"
                                }
                            }
                        },
                        "description": "Balance received successfully"
                    },
                    "401": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                },
                                "examples": {
                                    "unauthorized": {
                                        "value": {
                                            "error": "Unauthorized action. Log in to do that."
                                        }
                                    }
                                }
                            }
                        },
                        "description": "User's not logged in"
                    }
                },
                "summary": "Get user's balance"
            },
            "parameters": [
                {
                    "name": "Authorization",
                    "description": "User's session token",
                    "schema": {},
                    "in": "cookie"
                }
            ]
        },
        "/logout": {
            "summary": "User's log out related operations",
            "post": {
                "tags": [
                    "logout"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/postLogoutResponse"
                                }
                            }
                        },
                        "description": "Successful log out"
                    }
                },
                "summary": "Delete session cookie and log out"
            }
        },
        "/transfer": {
            "summary": "User's transfers related operations",
            "get": {
                "tags": [
                    "transfer"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/getTransferResponse"
                                }
                            }
                        },
                        "description": "Transaction history successfully retrieved"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                },
                                "examples": {
                                    "transfersHistoryError": {
                                        "value": {
                                            "error": "Could not find any transactions to display."
                                        }
                                    }
                                }
                            }
                        },
                        "description": "Transaction history retrieving failed"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                },
                                "examples": {
                                    "accountFindError": {
                                        "value": {
                                            "error": "Couldn't find your account."
                                        }
                                    }
                                }
                            }
                        },
                        "description": "Can not find user's account"
                    }
                },
                "summary": "Retrieve send and received transfers"
            },
            "post": {
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/postTransferRequest"
                            }
                        }
                    },
                    "required": true
                },
                "tags": [
                    "transfer"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/postTransferLocalResponse"
                                }
                            }
                        },
                        "description": "Local transfer was a success!"
                    },
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/postTransferResponse"
                                }
                            }
                        },
                        "description": "Remote transfer added to database"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "Something wrong with the request"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "Problems with reaching central bank"
                    }
                },
                "summary": "Make a new transfer to a local or a remote bank"
            },
            "parameters": [
                {
                    "name": "Authorization",
                    "description": "User's session token",
                    "schema": {},
                    "in": "cookie"
                }
            ]
        },
        "/transfer/b2b": {
            "summary": "Receive remote transfers",
            "post": {
                "tags": [
                    "transfer"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/postTransferB2bResponse"
                                }
                            }
                        },
                        "description": "Transfer to Small Bank was a success"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "Something was wrong with the sent jwt or saved jwksUrl"
                    },
                    "502": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "Errors communicating with the central pank\n"
                    }
                },
                "summary": "Send a transfer from remote bank to this bank"
            },
            "parameters": [
                {
                    "name": "Authorization",
                    "description": "User's session token",
                    "schema": {},
                    "in": "cookie"
                }
            ]
        },
        "/deposit/{amount}": {
            "summary": "User's deposit related operations",
            "post": {
                "tags": [
                    "deposit"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/postDepositResponse"
                                }
                            }
                        },
                        "description": "Money depositing was a success"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "Money depositing failed"
                    }
                },
                "summary": "Deposit money to user's account"
            },
            "parameters": [
                {
                    "name": "authorization",
                    "description": "User's session token",
                    "schema": {},
                    "in": "cookie"
                },
                {
                    "name": "amount",
                    "description": "Amount to deposit",
                    "schema": {
                        "type": "integer"
                    },
                    "in": "path",
                    "required": true
                }
            ]
        },
        "/withdraw/{amount}": {
            "summary": "User's withdrawing related operations",
            "post": {
                "tags": [
                    "withdraw"
                ],
                "parameters": [
                    {
                        "name": "authorization",
                        "description": "User's session token",
                        "schema": {},
                        "in": "cookie",
                        "required": false
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/postWithdrawResponse"
                                }
                            }
                        },
                        "description": "Money withdraw was a success\n"
                    },
                    "400": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "Money withdrawing failed"
                    },
                    "409": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                }
                            }
                        },
                        "description": "Insufficent funds"
                    }
                },
                "summary": "Withdraw money from user's account"
            },
            "parameters": [
                {
                    "name": "amount",
                    "in": "path",
                    "required": true
                }
            ]
        },
        "/transfer/jwks": {
            "summary": "Bank's jwksUrl",
            "get": {
                "tags": [
                    "transfer"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/getTransferJwksResponse"
                                }
                            }
                        },
                        "description": "jwksUrl responds successfully with JWKS keys"
                    }
                },
                "summary": "Get bank's JWKS keys"
            }
        },
        "/users/account": {
            "summary": "User's account related information",
            "get": {
                "tags": [
                    "users"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/getUsersAccount"
                                }
                            }
                        },
                        "description": "Account information successfully retrieved"
                    },
                    "500": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/errorResponse"
                                },
                                "examples": {
                                    "accountInformationError": {
                                        "value": {
                                            "error": "Couldn't find your user/account information from the database."
                                        }
                                    }
                                }
                            }
                        },
                        "description": "Couldn't find logged in user/account in the database"
                    }
                },
                "summary": "Get user's account information"
            },
            "parameters": [
                {
                    "name": "Authorization",
                    "description": "User's session token",
                    "schema": {},
                    "in": "cookie"
                }
            ]
        }
    },
    "components": {
        "schemas": {
            "postUsersRequest": {
                "description": "Request body when making POST /users request",
                "required": [
                    "firstname",
                    "lastname",
                    "password",
                    "email"
                ],
                "type": "object",
                "properties": {
                    "firstname": {
                        "description": "First name of the user's owner",
                        "type": "string"
                    },
                    "lastname": {
                        "description": "Last name of the user's owner",
                        "type": "string"
                    },
                    "password": {
                        "description": "Password used for logging into the bank",
                        "type": "string"
                    },
                    "email": {
                        "description": "Email used for logging into the bank",
                        "type": "string"
                    }
                },
                "example": {
                    "firstname": "John",
                    "lastname": "Doe",
                    "password": "Johnnyboy123",
                    "email": "johndoe@example.com"
                }
            },
            "errorResponse": {
                "title": "Root Type for errorResponse",
                "description": "Response body for errors",
                "type": "object",
                "properties": {
                    "error": {
                        "description": "Error description\n",
                        "type": "string"
                    }
                },
                "example": {
                    "error": "Error message."
                }
            },
            "postUsersResponse": {
                "title": "Root Type for postUsersResponse",
                "description": "Response in case of successful register",
                "required": [],
                "type": "object",
                "properties": {
                    "registerDate": {
                        "description": "Date of account creation"
                    },
                    "firstname": {
                        "description": "Account owner's first name"
                    },
                    "lastname": {
                        "description": "Account owner's last name"
                    },
                    "password": {
                        "description": "Password for logging into the user's account"
                    },
                    "email": {
                        "description": "Email for logging into the user's bank\n"
                    },
                    "balance": {
                        "description": "Account's balance"
                    },
                    "user": {
                        "description": "User's id, who the bank belongs to"
                    },
                    "bankPrefix": {
                        "description": "Small Bank API bank's prefix"
                    },
                    "accountNumber": {
                        "description": "Account number for the user's account"
                    },
                    "newUser_id": {
                        "description": "A unique ID identifying the user\n\n"
                    },
                    "newAccount_id": {
                        "description": "A unique ID identifying the account\n\n"
                    }
                },
                "example": {
                    "newUser": {
                        "registerDate": "2020-09-25T08:13:10.056Z",
                        "_id": "5f6dabe0e836b1744f316f19",
                        "firstname": "John",
                        "lastname": "Doe",
                        "password": "$2a$10$JcjhJoz.71dT/b5/NFNBi.QaNeHJkNy6ju7vFtinQg/sx5s7Zgf9S",
                        "email": "johndoe@example.com",
                        "__v": 0
                    },
                    "newAccount": {
                        "balance": 0,
                        "_id": "5f6dabe0e836b1744f316f1a",
                        "user": "5f6dabe0e836b1744f316f19",
                        "bankPrefix": "SBA",
                        "accountnumber": "uU7GedvmEwk8",
                        "__v": 0
                    }
                }
            },
            "postSessionsRequest": {
                "description": "Response body when making POST /sessions request",
                "required": [
                    "email",
                    "password"
                ],
                "type": "object",
                "properties": {
                    "email": {
                        "description": "User's email for logging in",
                        "type": "string"
                    },
                    "password": {
                        "description": "User's password for logging in.",
                        "type": "string"
                    }
                },
                "example": {
                    "email": "johndoe@example.com",
                    "password": "Johnnyboy123"
                }
            },
            "postSessionsResponse": {
                "description": "Response for successful POST /sessions request",
                "type": "object",
                "example": {
                    "message": "You have successfully logged in!"
                }
            },
            "getBalanceResponse": {
                "description": "User's balance",
                "type": "object",
                "example": {
                    "firstname": "John",
                    "balance": 50
                }
            },
            "postDepositResponse": {
                "description": "Response for successful deposit",
                "type": "object",
                "example": {
                    "You successfully deposited ": "...€"
                }
            },
            "postWithdrawResponse": {
                "description": "Response in case of a successful withdraw",
                "type": "object",
                "example": {
                    "You successfully withdrew ": "...€"
                }
            },
            "postLogoutResponse": {
                "description": "Successful log out",
                "type": "object",
                "example": "You have logged out - session token has been deleted!"
            },
            "postTransferRequest": {
                "title": "Root Type for PostTransferRequest",
                "description": "Request body when making POST /transfer request",
                "required": [
                    "accountFrom",
                    "accountTo",
                    "amount",
                    "currency",
                    "explanation"
                ],
                "type": "object",
                "properties": {
                    "accountFrom": {
                        "description": "Sending account's account number",
                        "type": "string"
                    },
                    "accountTo": {
                        "description": "Receiving account's account number",
                        "type": "string"
                    },
                    "currency": {
                        "description": "Money currency that you're sending",
                        "type": "string"
                    },
                    "amount": {
                        "format": "int32",
                        "description": "Amount that you wish to send",
                        "type": "integer"
                    },
                    "explanation": {
                        "description": "Reason of sending the money",
                        "type": "string"
                    }
                },
                "example": {
                    "accountFrom": "9c5SBerzxcbmM49",
                    "accountTo": "9c5WZ5Spc26AKZp",
                    "currency": "eur",
                    "amount": 1,
                    "explanation": "This is an example of a transfer"
                }
            },
            "postTransferResponse": {
                "title": "Root Type for postTransferResponse",
                "description": "Response for a successful transfer",
                "type": "object",
                "properties": {
                    "message": {
                        "type": "string"
                    }
                },
                "example": {
                    "message": "Remote transfer added"
                }
            },
            "postTransferLocalResponse": {
                "title": "Root Type for postTransferLocalResponse",
                "description": "Response for local successful transfer",
                "type": "object",
                "properties": {
                    "message": {
                        "type": "string"
                    }
                },
                "example": {
                    "message": "Local transfer completed!"
                }
            },
            "postTransferB2bResponse": {
                "title": "Root Type for postTransferB2bResponse",
                "description": "B2b transfer successful response",
                "type": "object",
                "properties": {
                    "receiverName": {
                        "description": "Name of the receiving user",
                        "type": "string"
                    }
                },
                "example": {
                    "receiverName": "John"
                }
            },
            "getTransferJwksResponse": {
                "title": "Root Type for getTransferJwksResponse",
                "description": "Successful jwksUrl response",
                "type": "object",
                "properties": {
                    "keys": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": {
                                "kty": {
                                    "type": "string"
                                },
                                "kid": {
                                    "type": "string"
                                },
                                "n": {
                                    "type": "string"
                                },
                                "e": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                },
                "example": {
                    "keys": [
                        {
                            "kty": "RSA",
                            "kid": "KmmIiWrtvSTO6eZaZ_ZJJRt_vOo7T8bqc87uf-_1K5g",
                            "n": "mUdBFzB6qUTA9G4XgnvhgF8cHlvex96qTXc7stfM9IPL7fWgoivOszyR4W3yR6uzIhf8eoDXw7LMJt0sQe-EfAWbSCmRMqJy3PfCkQRtlsc2P7zqXuDZUUD-wT1M_c0vZSuLomRgiC6Ht3KAkPYJnMuJ2WJBzwE9zpVsLuWJpIE",
                            "e": "AQAB"
                        }
                    ]
                }
            },
            "getTransferResponse": {
                "title": "Root Type for getTransferResponse",
                "description": "Transfer retrieving was successful",
                "type": "object",
                "example": {
                    "transfers_sent": [
                        {
                            "createdAt": "2020-11-03T17:57:17.380Z",
                            "amount": 1,
                            "currency": "eur",
                            "accountTo": "9c5WZ5Spc26AKZp",
                            "explanation": "This is an example of a transfer",
                            "senderName": "John"
                        }
                    ],
                    "transfers_received": [
                        {
                            "createdAt": "2020-11-03T18:02:13.517Z",
                            "amount": 1,
                            "currency": "eur",
                            "accountFrom": "9c5j5zwFKY4JC8g",
                            "explanation": "This is an example of a transfer",
                            "senderName": "Hannes"
                        }
                    ]
                }
            },
            "getUsersAccount": {
                "title": "Root Type for getUsersAccount",
                "description": "Get user's account information",
                "type": "object",
                "properties": {
                    "firstname": {
                        "type": "string"
                    },
                    "lastname": {
                        "type": "string"
                    },
                    "email": {
                        "type": "string"
                    },
                    "accountnumber": {
                        "type": "string"
                    }
                },
                "example": {
                    "firstname": "John",
                    "lastname": "Doe",
                    "email": "johndoe@example.com",
                    "accountnumber": "9c5SBerzxcbmM49"
                }
            }
        },
        "securitySchemes": {
            "Authorization": {
                "type": "apiKey",
                "description": "Authorization cookie, which will be saved after successful sessions request ",
                "name": "Authorization",
                "in": "cookie"
            }
        }
    },
    "tags": [
        {
            "name": "users",
            "description": "User related operations"
        },
        {
            "name": "sessions",
            "description": "Sessions related operations\n"
        },
        {
            "name": "balance",
            "description": "User's balance\n"
        },
        {
            "name": "deposit",
            "description": "Deposit money to account\n"
        },
        {
            "name": "withdraw",
            "description": "Withdraw money from account\n"
        },
        {
            "name": "logout",
            "description": "Log out of the user's account\n"
        },
        {
            "name": "transfer",
            "description": "Transfer related operations\n"
        }
    ]
}